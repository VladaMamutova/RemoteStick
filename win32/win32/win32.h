/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <endpointvolume.h>

#define MAX_VOLUME  100
#define SOUND_SETTINGS_NUMBER  2

/* Header for class main_kotlin_Win32 */

#ifndef _Included_main_kotlin_Win32
#define _Included_main_kotlin_Win32
#ifdef __cplusplus
extern "C" {
#endif
	IAudioEndpointVolume* endpointVolume = NULL;
	bool isVolumeValid = false;
	HCURSOR defaultCursor;
	HCURSOR laserCursor;

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    init
	 * Signature: ()Z
	 */
	JNIEXPORT jboolean JNICALL Java_main_kotlin_Win32_init
	(JNIEnv*, jobject);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    release
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_release
	(JNIEnv*, jobject);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    leftClick
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_leftClick
	(JNIEnv*, jobject);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    middleClick
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_middleClick
	(JNIEnv*, jobject);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    rightClick
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_rightClick
	(JNIEnv*, jobject);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    leftDown
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_leftDown
	(JNIEnv*, jobject);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    leftUp
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_leftUp
	(JNIEnv*, jobject);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    move
	 * Signature: (II)V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_move
	(JNIEnv*, jobject, jint, jint);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    scroll
	 * Signature: (I)V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_scroll
	(JNIEnv*, jobject, jint);


	/*
	 * Class:     main_kotlin_Win32
	 * Method:    sendSymbol
	 * Signature: (C)V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_sendSymbol
	(JNIEnv*, jobject, jchar);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    sendSpecialKeys
	 * Signature: ([I)V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_sendSpecialKeys
	(JNIEnv*, jobject, jintArray);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    sendKeys
	 * Signature: ([IC)V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_sendKeys
	(JNIEnv*, jobject, jintArray, jchar);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    changeVolume
	 * Signature: (I)V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_changeVolume
	(JNIEnv*, jobject, jint);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    volumeMute
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_volumeMute
	(JNIEnv*, jobject);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    getVolumeAndMute
	 * Signature: ()[I
	 */
	JNIEXPORT jintArray JNICALL Java_main_kotlin_Win32_getVolumeAndMute
	(JNIEnv*, jobject);


	/*
	 * Class:     main_kotlin_Win32
	 * Method:    playPause
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_playPause
	(JNIEnv*, jobject);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    nextTrack
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_nextTrack
	(JNIEnv*, jobject);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    prevTrack
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_prevTrack
	(JNIEnv*, jobject);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    stop
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_stop
	(JNIEnv*, jobject);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    setLaserCursor
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_setLaserCursor
	(JNIEnv*, jobject);

	/*
	 * Class:     main_kotlin_Win32
	 * Method:    restoreCursor
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_main_kotlin_Win32_restoreCursor
	(JNIEnv*, jobject);

#ifdef __cplusplus
}
#endif
#endif
